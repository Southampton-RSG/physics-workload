# Generated by Django 5.1.5 on 2025-02-13 23:31

import app.models.academic_year
import django.core.validators
import django.db.models.deletion
import django.db.models.manager
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AcademicGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, unique=True)),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name': 'Academic Group',
                'verbose_name_plural': 'Academic Groups',
                'ordering': ('name',),
            },
            managers=[
                ('objects_active', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='AcademicYear',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.IntegerField(help_text='Initial year, e.g. 2000 for 2000-2001 academic year.', unique=True, validators=[django.core.validators.MinValueValidator(2000)])),
                ('load_lecture', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)], verbose_name='Load hours per lecture & problems class')),
                ('load_lecture_first', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)], verbose_name='Load hours per lecture & problems class for first-time assignment')),
                ('load_coursework_set', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)], verbose_name='Load hours per item of coursework prepared')),
                ('load_coursework_credit', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)], verbose_name='Load hours per coursework credit hour')),
                ('load_coursework_marked', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)], verbose_name='Load hours per (coursework plus coursework credit hour) marked')),
                ('load_exam_credit', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)], verbose_name='Load hours per exam credit hour')),
                ('load_exam_marked', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)], verbose_name='Load hours per exam marked')),
                ('load_fte_misc', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)], verbose_name='Staff misc. load per FTE fraction')),
                ('notes', models.TextField(blank=True)),
            ],
            options={
                'verbose_name': 'Academic Year',
                'verbose_name_plural': 'Academic Years',
                'ordering': ['-year'],
                'get_latest_by': 'year',
            },
        ),
        migrations.CreateModel(
            name='LoadFunction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, unique=True)),
                ('expression', models.TextField(verbose_name='Weighting Expression')),
                ('is_active', models.BooleanField(default=True)),
                ('notes', models.TextField(blank=True)),
            ],
            options={
                'verbose_name': 'Dissertation Load Function',
                'verbose_name_plural': 'Dissertation Load Functions',
                'ordering': ('name',),
            },
            managers=[
                ('objects_active', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='TaskBase',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128)),
                ('description', models.TextField()),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name': 'Task',
                'verbose_name_plural': 'Tasks',
                'ordering': ('is_active', 'name'),
            },
            managers=[
                ('objects_active', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='TaskYearBase',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number_needed', models.IntegerField(default=1, validators=[django.core.validators.MinValueValidator(1)])),
                ('load_fixed', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0)], verbose_name='Fixed load hours')),
                ('load_fixed_first', models.FloatField(blank=True, default=0.0, null=True, validators=[django.core.validators.MinValueValidator(0.0)], verbose_name='Fixed load hours (first time)')),
                ('load', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('load_first', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('students', models.IntegerField(blank=True, help_text='Number of students for scaling load', null=True)),
                ('notes', models.TextField(blank=True)),
                ('load_function', models.ForeignKey(help_text='Function by which student load for this task scales', on_delete=django.db.models.deletion.PROTECT, to='app.loadfunction')),
            ],
            options={
                'verbose_name': 'Task Year',
                'verbose_name_plural': 'Task Year',
            },
        ),
        migrations.CreateModel(
            name='Transaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bill_for', models.CharField(max_length=100)),
                ('issue_date', models.DateField()),
                ('due_date', models.DateField()),
                ('total', models.DecimalField(decimal_places=2, max_digits=10)),
                ('status', models.CharField(max_length=10)),
                ('created_time', models.DateTimeField(auto_now_add=True)),
                ('updated_time', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'transaction',
                'verbose_name_plural': 'transactions',
            },
        ),
        migrations.CreateModel(
            name='Module',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=16, unique=True)),
                ('name', models.CharField(max_length=128, unique=True)),
                ('has_dissertation', models.BooleanField(default=False)),
                ('has_placement', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('description', models.TextField(blank=True)),
                ('academic_group', models.ForeignKey(blank=True, help_text='The group, if any, responsible for this module', null=True, on_delete=django.db.models.deletion.PROTECT, to='app.academicgroup', verbose_name='Group')),
            ],
            options={
                'verbose_name': 'Module',
                'verbose_name_plural': 'Modules',
                'ordering': ['name'],
            },
            managers=[
                ('objects_active', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='ModuleYear',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('students', models.IntegerField(blank=True, default=None, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('credit_hours', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Credit Hours')),
                ('lectures', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Lectures')),
                ('problem_classes', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Problem Classes')),
                ('coursework', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Coursework Prepared')),
                ('synoptic_lectures', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Synoptic Lectures')),
                ('exams', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Exams')),
                ('exam_mark_fraction', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)], verbose_name='Exam fraction of total mark')),
                ('coursework_mark_fraction', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)], verbose_name='Coursework fraction of total mark')),
                ('notes', models.TextField(blank=True)),
                ('academic_year', models.ForeignKey(default=app.models.academic_year.get_latest_academic_year, on_delete=django.db.models.deletion.PROTECT, to='app.academicyear')),
                ('module', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='module_years', to='app.module')),
            ],
            options={
                'verbose_name': 'Module Year',
                'verbose_name_plural': 'Module Years',
                'ordering': ('-academic_year', 'module'),
                'get_latest_by': 'academic_year',
            },
        ),
        migrations.CreateModel(
            name='Staff',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('account', models.CharField(max_length=16, unique=True)),
                ('name', models.CharField(max_length=128)),
                ('gender', models.CharField(max_length=1)),
                ('type', models.CharField(max_length=16)),
                ('notes', models.TextField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
                ('academic_group', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='app.academicgroup', verbose_name='Group')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Staff Member',
                'verbose_name_plural': 'Staff Members',
                'ordering': ('is_active', 'name'),
            },
            managers=[
                ('objects_active', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='StaffYear',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('load_contract', models.FloatField(blank=True, help_text='Contracted load hours', null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('load_actual', models.FloatField(blank=True, help_text='Worked load hours', null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('hours', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(2000)], verbose_name='Fixed hours')),
                ('fte_fraction', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)], verbose_name='FTE fraction')),
                ('notes', models.TextField(blank=True)),
                ('academic_year', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='app.academicyear')),
                ('staff', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='app.staff')),
            ],
            options={
                'verbose_name': 'Workload Year',
                'verbose_name_plural': 'Workload Years',
                'ordering': ('academic_year', 'staff'),
                'get_latest_by': 'academic_year',
            },
        ),
        migrations.CreateModel(
            name='TaskDepartment',
            fields=[
                ('taskbase_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='app.taskbase')),
            ],
            options={
                'verbose_name': 'Departmental Task',
                'verbose_name_plural': 'Departmental Tasks',
            },
            bases=('app.taskbase',),
            managers=[
                ('objects_active', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='TaskModule',
            fields=[
                ('taskbase_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='app.taskbase')),
            ],
            options={
                'verbose_name': 'Module Task',
                'verbose_name_plural': 'Module Tasks',
                'ordering': ('is_active', 'module', 'name'),
            },
            bases=('app.taskbase',),
            managers=[
                ('objects_active', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='TaskYearDepartment',
            fields=[
                ('taskyearbase_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='app.taskyearbase')),
            ],
            options={
                'verbose_name': 'Departmental Task Details',
                'verbose_name_plural': 'Departmental Tasks Details',
            },
            bases=('app.taskyearbase',),
        ),
        migrations.CreateModel(
            name='TaskYearModule',
            fields=[
                ('taskyearbase_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='app.taskyearbase')),
                ('coursework_fraction', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)], verbose_name='Fraction of module coursework marked')),
                ('exam_fraction', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)], verbose_name='Fraction of module exams marked')),
            ],
            options={
                'verbose_name': 'Module Task Details',
                'verbose_name_plural': 'Module Tasks Details',
                'ordering': ('-module_year', 'task_module'),
                'get_latest_by': 'module_year',
            },
            bases=('app.taskyearbase',),
        ),
        migrations.CreateModel(
            name='Assignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notes', models.TextField(blank=True)),
                ('is_first_time', models.BooleanField(default=False)),
                ('is_provisional', models.BooleanField(default=False)),
                ('staff_year', models.ForeignKey(limit_choices_to={'academic_year': app.models.academic_year.get_latest_academic_year}, on_delete=django.db.models.deletion.PROTECT, related_name='assignments', to='app.staffyear')),
                ('task_year', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='app.taskyearbase')),
            ],
            options={
                'verbose_name': 'Assignment',
                'verbose_name_plural': 'Assignments',
                'ordering': ('-task_year', 'staff_year'),
            },
        ),
        migrations.AddIndex(
            model_name='module',
            index=models.Index(fields=['code'], name='app_module_code_b3bfa8_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='moduleyear',
            unique_together={('module', 'academic_year')},
        ),
        migrations.AlterUniqueTogether(
            name='staffyear',
            unique_together={('staff', 'academic_year')},
        ),
        migrations.AddField(
            model_name='taskmodule',
            name='module',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='app.module'),
        ),
        migrations.AddField(
            model_name='taskyeardepartment',
            name='academic_year',
            field=models.ForeignKey(blank=True, default=app.models.academic_year.get_latest_academic_year, null=True, on_delete=django.db.models.deletion.PROTECT, to='app.academicyear'),
        ),
        migrations.AddField(
            model_name='taskyeardepartment',
            name='task_department',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='app.taskdepartment'),
        ),
        migrations.AddField(
            model_name='taskyearmodule',
            name='module_year',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='app.moduleyear'),
        ),
        migrations.AddField(
            model_name='taskyearmodule',
            name='task_module',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='app.taskmodule'),
        ),
        migrations.AlterUniqueTogether(
            name='assignment',
            unique_together={('task_year', 'staff_year')},
        ),
        migrations.AlterUniqueTogether(
            name='taskyeardepartment',
            unique_together={('task_department', 'academic_year')},
        ),
        migrations.AlterUniqueTogether(
            name='taskyearmodule',
            unique_together={('task_module', 'module_year')},
        ),
    ]
